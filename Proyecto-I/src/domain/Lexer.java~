/* The following code was generated by JFlex 1.6.1 */

import ProyectoI.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/esteb/Documents/2018 - II SEMESTRE/Compiladores/Proyecto I/Proyecto-I/src/domain/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\53\1\54\1\54\1\53\22\0\1\30\1\0\1\60"+
    "\1\61\3\0\1\57\1\45\1\46\1\42\1\37\1\51\1\34\1\35"+
    "\1\43\12\32\1\44\1\52\1\41\1\36\1\40\2\0\1\1\1\6"+
    "\1\15\1\3\1\7\1\22\1\10\1\17\1\11\1\31\1\26\1\13"+
    "\1\24\1\2\1\12\1\25\1\31\1\4\1\16\1\14\1\23\1\20"+
    "\1\21\1\27\1\5\1\31\1\47\1\0\1\50\1\0\1\31\1\0"+
    "\4\31\1\33\25\31\1\55\1\0\1\56\7\0\1\54\u1fa2\0\1\54"+
    "\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\25\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\3\1\1\24\5\2\1\25"+
    "\6\2\2\25\23\2\1\0\1\26\1\5\1\27\1\10"+
    "\1\30\1\31\1\11\1\32\1\33\1\12\1\13\1\14"+
    "\1\0\1\3\1\7\2\0\1\3\1\0\1\24\1\0"+
    "\1\24\21\2\1\25\4\2\1\34\2\0\15\2\1\0"+
    "\1\34\2\3\6\2\1\34\1\0\3\2\1\34\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\62"+
    "\0\u047e\0\u04b0\0\62\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\62\0\62\0\62\0\62\0\62"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u012c\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\u0dac\0\62\0\62\0\u0dde"+
    "\0\62\0\62\0\u0e10\0\u0e42\0\62\0\u0e74\0\u0672\0\u0672"+
    "\0\u06a4\0\u06a4\0\u06d6\0\u06d6\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u0e10\0\u0e74\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\7"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\7\1\27"+
    "\1\30\1\7\1\31\1\7\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\30\1\0\1\51\1\2\1\52"+
    "\1\53\1\54\63\0\1\7\1\55\1\7\1\56\23\7"+
    "\1\0\3\7\27\0\10\7\1\57\1\60\15\7\1\0"+
    "\3\7\27\0\10\7\1\61\1\62\15\7\1\0\3\7"+
    "\27\0\6\7\1\63\20\7\1\0\3\7\27\0\27\7"+
    "\1\0\3\7\27\0\4\7\1\64\1\7\1\65\2\7"+
    "\1\66\15\7\1\0\3\7\27\0\1\7\1\55\10\7"+
    "\1\67\14\7\1\0\3\7\27\0\11\7\1\70\15\7"+
    "\1\0\3\7\27\0\1\7\1\71\17\7\1\72\5\7"+
    "\1\0\3\7\27\0\3\7\1\72\15\7\1\72\5\7"+
    "\1\0\3\7\27\0\1\73\10\7\1\74\15\7\1\0"+
    "\3\7\27\0\3\7\1\75\1\76\4\7\1\72\4\7"+
    "\1\77\10\7\1\0\3\7\27\0\1\67\10\7\1\100"+
    "\4\7\1\21\10\7\1\0\3\7\27\0\6\7\1\60"+
    "\4\7\1\101\2\7\1\102\10\7\1\0\3\7\27\0"+
    "\1\103\26\7\1\0\3\7\27\0\3\7\1\104\4\7"+
    "\1\105\5\7\1\106\10\7\1\0\3\7\27\0\1\107"+
    "\7\7\1\110\1\111\10\7\1\112\4\7\1\0\3\7"+
    "\27\0\1\7\1\113\25\7\1\0\3\7\27\0\11\7"+
    "\1\55\15\7\1\0\3\7\27\0\1\114\2\7\1\115"+
    "\23\7\1\0\3\7\27\0\11\7\1\103\15\7\1\0"+
    "\3\7\60\0\1\31\2\0\1\116\56\0\1\31\1\0"+
    "\1\117\1\0\1\120\61\0\1\121\61\0\1\122\1\123"+
    "\60\0\1\124\1\0\1\125\57\0\1\126\1\0\1\127"+
    "\1\130\56\0\1\131\61\0\1\132\3\0\1\133\1\134"+
    "\54\0\1\135\65\0\1\136\17\0\53\137\2\0\1\137"+
    "\1\140\3\137\53\141\2\0\2\141\1\142\2\141\53\143"+
    "\2\0\3\143\1\144\1\143\53\54\2\0\5\54\1\0"+
    "\2\7\1\72\24\7\1\0\3\7\27\0\3\7\1\145"+
    "\23\7\1\0\3\7\27\0\12\7\1\72\14\7\1\0"+
    "\3\7\27\0\13\7\1\72\13\7\1\0\3\7\27\0"+
    "\17\7\1\72\7\7\1\0\3\7\27\0\20\7\1\146"+
    "\6\7\1\0\3\7\27\0\1\147\13\7\1\150\7\7"+
    "\1\151\2\7\1\0\3\7\27\0\13\7\1\152\13\7"+
    "\1\0\3\7\27\0\7\7\1\153\17\7\1\0\3\7"+
    "\27\0\11\7\1\154\15\7\1\0\3\7\27\0\15\7"+
    "\1\152\11\7\1\0\3\7\27\0\13\7\1\155\13\7"+
    "\1\0\3\7\27\0\12\7\1\156\1\72\13\7\1\0"+
    "\3\7\27\0\5\7\1\157\21\7\1\0\3\7\27\0"+
    "\1\7\1\160\25\7\1\0\3\7\27\0\22\7\1\152"+
    "\4\7\1\0\3\7\27\0\24\7\1\152\2\7\1\0"+
    "\3\7\27\0\6\7\1\161\20\7\1\0\3\7\27\0"+
    "\1\7\1\162\25\7\1\0\3\7\27\0\3\7\1\163"+
    "\23\7\1\0\3\7\27\0\11\7\1\164\15\7\1\0"+
    "\3\7\27\0\3\7\1\72\23\7\1\0\3\7\27\0"+
    "\10\7\1\64\16\7\1\0\3\7\27\0\13\7\1\165"+
    "\13\7\1\0\3\7\27\0\10\7\1\110\16\7\1\0"+
    "\3\7\27\0\12\7\1\67\14\7\1\0\3\7\27\0"+
    "\12\7\1\152\14\7\1\0\3\7\27\0\3\7\1\166"+
    "\23\7\1\0\3\7\27\0\1\7\1\167\25\7\1\0"+
    "\3\7\27\0\13\7\1\170\13\7\1\0\3\7\27\0"+
    "\14\7\1\171\12\7\1\0\3\7\27\0\11\7\1\172"+
    "\15\7\1\0\3\7\60\0\1\173\65\0\1\124\61\0"+
    "\1\126\23\0\42\133\1\174\10\133\2\0\5\133\53\134"+
    "\2\0\5\134\42\136\1\175\10\136\2\0\5\136\1\0"+
    "\1\176\26\7\1\0\3\7\27\0\1\7\1\70\25\7"+
    "\1\0\3\7\27\0\2\7\1\72\7\7\1\72\14\7"+
    "\1\0\3\7\27\0\11\7\1\177\15\7\1\0\3\7"+
    "\27\0\6\7\1\200\20\7\1\0\3\7\27\0\6\7"+
    "\1\72\20\7\1\0\3\7\27\0\10\7\1\161\16\7"+
    "\1\0\3\7\27\0\12\7\1\201\14\7\1\0\3\7"+
    "\27\0\11\7\1\72\15\7\1\0\3\7\27\0\10\7"+
    "\1\202\16\7\1\0\3\7\27\0\6\7\1\57\20\7"+
    "\1\0\3\7\27\0\7\7\1\203\17\7\1\0\3\7"+
    "\27\0\1\7\1\72\25\7\1\0\3\7\27\0\15\7"+
    "\1\60\11\7\1\0\3\7\27\0\10\7\1\204\16\7"+
    "\1\0\3\7\27\0\3\7\1\205\23\7\1\0\3\7"+
    "\27\0\16\7\1\72\10\7\1\0\3\7\27\0\20\7"+
    "\1\206\6\7\1\0\3\7\27\0\14\7\1\207\12\7"+
    "\1\0\3\7\27\0\10\7\1\57\16\7\1\0\3\7"+
    "\27\0\25\7\1\210\1\7\1\0\3\7\27\0\7\7"+
    "\1\211\4\7\1\212\12\7\1\0\3\7\35\0\1\213"+
    "\22\0\1\214\1\213\26\0\42\133\1\174\1\215\7\133"+
    "\2\0\5\133\42\136\1\175\3\136\1\216\4\136\2\0"+
    "\5\136\1\0\4\7\1\72\22\7\1\0\3\7\27\0"+
    "\3\7\1\55\23\7\1\0\3\7\27\0\1\60\26\7"+
    "\1\0\3\7\27\0\6\7\1\217\20\7\1\0\3\7"+
    "\27\0\1\7\1\152\25\7\1\0\3\7\27\0\10\7"+
    "\1\220\16\7\1\0\3\7\27\0\1\7\1\221\25\7"+
    "\1\0\3\7\27\0\13\7\1\203\13\7\1\0\3\7"+
    "\27\0\1\177\26\7\1\0\3\7\27\0\13\7\1\222"+
    "\13\7\1\0\3\7\27\0\6\7\1\55\20\7\1\0"+
    "\3\7\27\0\3\7\1\223\23\7\1\0\3\7\27\0"+
    "\6\7\1\224\20\7\1\0\3\7\60\0\1\225\1\0"+
    "\1\226\2\0\1\226\31\0\1\213\22\0\1\214\1\213"+
    "\1\0\1\116\25\0\1\161\26\7\1\0\3\7\27\0"+
    "\1\7\1\60\25\7\1\0\3\7\27\0\7\7\1\72"+
    "\17\7\1\0\3\7\27\0\10\7\1\227\16\7\1\0"+
    "\3\7\27\0\1\230\26\7\1\0\3\7\27\0\2\7"+
    "\1\231\24\7\1\0\3\7\60\0\1\232\61\0\1\225"+
    "\30\0\11\7\1\161\15\7\1\0\3\7\27\0\23\7"+
    "\1\72\3\7\1\0\3\7\27\0\22\7\1\233\4\7"+
    "\1\0\3\7\60\0\1\232\2\0\1\116\25\0\3\7"+
    "\1\152\23\7\1\0\3\7\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\2\1\1\11\10\1\5\11"+
    "\45\1\1\0\6\11\1\1\2\11\1\1\2\11\1\0"+
    "\1\1\1\11\2\0\1\1\1\0\1\1\1\0\30\1"+
    "\2\0\15\1\1\0\12\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 29: break;
          case 2: 
            { lexeme = yytext(); return ID;
            }
          case 30: break;
          case 3: 
            { /*Ignore*/
            }
          case 31: break;
          case 4: 
            { lexeme = yytext(); return INTEGERLIT;
            }
          case 32: break;
          case 5: 
            { lexeme = yytext(); return SUBTRACTIONOP;
            }
          case 33: break;
          case 6: 
            { lexeme = yytext(); return POINT;
            }
          case 34: break;
          case 7: 
            { lexeme = yytext(); return ASSIGNOP;
            }
          case 35: break;
          case 8: 
            { lexeme = yytext(); return ADDITIONOP;
            }
          case 36: break;
          case 9: 
            { lexeme = yytext(); return GREATEROP;
            }
          case 37: break;
          case 10: 
            { lexeme = yytext(); return LESSOP;
            }
          case 38: break;
          case 11: 
            { lexeme = yytext(); return MULTIPLICATIONOP;
            }
          case 39: break;
          case 12: 
            { lexeme = yytext(); return DIVISIONOP;
            }
          case 40: break;
          case 13: 
            { lexeme = yytext(); return COLON;
            }
          case 41: break;
          case 14: 
            { lexeme = yytext(); return LEFTPAR;
            }
          case 42: break;
          case 15: 
            { lexeme = yytext(); return RIGHTPAR;
            }
          case 43: break;
          case 16: 
            { lexeme = yytext(); return LEFTSQU;
            }
          case 44: break;
          case 17: 
            { lexeme = yytext(); return RIGHTSQU;
            }
          case 45: break;
          case 18: 
            { lexeme = yytext(); return COMA;
            }
          case 46: break;
          case 19: 
            { lexeme = yytext(); return SEMICOLON;
            }
          case 47: break;
          case 20: 
            { lexeme = yytext(); return STRINGLIT;
            }
          case 48: break;
          case 21: 
            { lexeme = yytext(); return RESERVEDWORDS
            }
          case 49: break;
          case 22: 
            { lexeme = yytext(); return LESSONEOP;
            }
          case 50: break;
          case 23: 
            { lexeme = yytext(); return EQUALSOP;
            }
          case 51: break;
          case 24: 
            { lexeme = yytext(); return PLUSONEOP;
            }
          case 52: break;
          case 25: 
            { lexeme = yytext(); return GREATEROREQUALOP;
            }
          case 53: break;
          case 26: 
            { lexeme = yytext(); return LESSOREQUALOP;
            }
          case 54: break;
          case 27: 
            { lexeme = yytext(); return DISTINCTOP;
            }
          case 55: break;
          case 28: 
            { lexeme = yytext(); return FLOATLIT;
            }
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
